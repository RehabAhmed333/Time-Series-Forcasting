lty = "dotted"
)
dev.off()
knitr::include_graphics("my_venn_diagram.png")
library(VennDiagram)
# Create Venn diagram
png("my_venn_diagram.png", width=400, height=400)
draw.pairwise.venn(
area1 = length(genes1),
area2 = length(genes2),
cross.area = length(intersect(genes1, genes2)),
category = c("DEGs", "DEGs_batchRemoved"),
fill = c("skyblue", "orange"),
alpha = c(0.5, 0.5),
cex = 1,
fontface = "bold",
cat.fontface = "bold",
cat.dist = c(0, 0.1),
cat.pos = c(-40, 30),
scaled = TRUE,
lty = "dotted"
)
dev.off()
knitr::include_graphics("my_venn_diagram.png")
library(VennDiagram)
# Create Venn diagram
png("my_venn_diagram.png", width=400, height=400)
draw.pairwise.venn(
area1 = length(genes1),
area2 = length(genes2),
cross.area = length(intersect(genes1, genes2)),
category = c("DEGs", "DEGs_batchRemoved"),
fill = c("skyblue", "orange"),
alpha = c(0.5, 0.5),
cex = 1,
fontface = "bold",
cat.fontface = "bold",
cat.dist = c(0, -0.1),
cat.pos = c(-40, 30),
scaled = TRUE,
lty = "dotted"
)
dev.off()
knitr::include_graphics("my_venn_diagram.png")
library(VennDiagram)
# Create Venn diagram
png("my_venn_diagram.png", width=400, height=400)
draw.pairwise.venn(
area1 = length(genes1),
area2 = length(genes2),
cross.area = length(intersect(genes1, genes2)),
category = c("DEGs", "DEGs_batchRemoved"),
fill = c("skyblue", "orange"),
alpha = c(0.5, 0.5),
cex = 1,
fontface = "bold",
cat.fontface = "bold",
cat.dist = c(0, -0.8),
cat.pos = c(-40, 30),
scaled = TRUE,
lty = "dotted"
)
dev.off()
knitr::include_graphics("my_venn_diagram.png")
library(VennDiagram)
# Create Venn diagram
png("my_venn_diagram.png", width=400, height=400)
draw.pairwise.venn(
area1 = length(genes1),
area2 = length(genes2),
cross.area = length(intersect(genes1, genes2)),
category = c("DEGs", "DEGs_batchRemoved"),
fill = c("skyblue", "orange"),
alpha = c(0.5, 0.5),
cex = 1,
fontface = "bold",
cat.fontface = "bold",
cat.dist = c(0, -0.1),
cat.pos = c(-40, 40),
scaled = TRUE,
lty = "dotted"
)
dev.off()
knitr::include_graphics("my_venn_diagram.png")
library(VennDiagram)
# Create Venn diagram
png("my_venn_diagram.png", width=400, height=400)
draw.pairwise.venn(
area1 = length(genes1),
area2 = length(genes2),
cross.area = length(intersect(genes1, genes2)),
category = c("DEGs", "DEGs_batchRemoved"),
fill = c("skyblue", "orange"),
alpha = c(0.5, 0.5),
cex = 1,
fontface = "bold",
cat.fontface = "bold",
cat.dist = c(0, -0.1),
cat.pos = c(-40, 50),
scaled = TRUE,
lty = "dotted"
)
dev.off()
knitr::include_graphics("my_venn_diagram.png")
library(VennDiagram)
# Create Venn diagram
png("my_venn_diagram.png", width=400, height=400)
draw.pairwise.venn(
area1 = length(genes1),
area2 = length(genes2),
cross.area = length(intersect(genes1, genes2)),
category = c("DEGs", "DEGs_batchRemoved"),
fill = c("skyblue", "orange"),
alpha = c(0.5, 0.5),
cex = 1,
fontface = "bold",
cat.fontface = "bold",
cat.dist = c(-0.1, -0.1),
cat.pos = c(-40, 50),
scaled = TRUE,
lty = "dotted"
)
dev.off()
knitr::include_graphics("my_venn_diagram.png")
library(VennDiagram)
# Create Venn diagram
png("my_venn_diagram.png", width=400, height=400)
draw.pairwise.venn(
area1 = length(genes1),
area2 = length(genes2),
cross.area = length(intersect(genes1, genes2)),
category = c("DEGs", "DEGs_batchRemoved"),
fill = c("skyblue", "orange"),
alpha = c(0.5, 0.5),
cex = 1,
fontface = "bold",
cat.fontface = "bold",
cat.dist = c(-0.1, -0.1),
cat.pos = c(-60, 50),
scaled = TRUE,
lty = "dotted"
)
dev.off()
knitr::include_graphics("my_venn_diagram.png")
library(VennDiagram)
# Create Venn diagram
png("my_venn_diagram.png", width=400, height=400)
draw.pairwise.venn(
area1 = length(genes1),
area2 = length(genes2),
cross.area = length(intersect(genes1, genes2)),
category = c("DEGs", "DEGs_batchRemoved"),
fill = c("skyblue", "orange"),
alpha = c(0.5, 0.5),
cex = 1,
fontface = "bold",
cat.fontface = "bold",
cat.dist = c(0, -0.1),
cat.pos = c(-60, 50),
scaled = TRUE,
lty = "dotted"
)
dev.off()
knitr::include_graphics("my_venn_diagram.png")
library(VennDiagram)
# Create Venn diagram
png("my_venn_diagram.png", width=400, height=400)
draw.pairwise.venn(
area1 = length(genes1),
area2 = length(genes2),
cross.area = length(intersect(genes1, genes2)),
category = c("DEGs", "DEGs_batchRemoved"),
fill = c("skyblue", "orange"),
alpha = c(0.5, 0.5),
cex = 1,
fontface = "bold",
cat.fontface = "bold",
cat.dist = c(0, -0.1),
cat.pos = c(-60, 50),
main = "Venn Diagram"
scaled = TRUE,
library(VennDiagram)
# Create Venn diagram
png("my_venn_diagram.png", width=400, height=400)
draw.pairwise.venn(
area1 = length(genes1),
area2 = length(genes2),
cross.area = length(intersect(genes1, genes2)),
category = c("DEGs", "DEGs_batchRemoved"),
fill = c("skyblue", "orange"),
alpha = c(0.5, 0.5),
cex = 1,
fontface = "bold",
cat.fontface = "bold",
cat.dist = c(0, -0.1),
cat.pos = c(-60, 50),
main = "Venn Diagram",
scaled = TRUE,
lty = "dotted"
)
dev.off()
knitr::include_graphics("my_venn_diagram.png")
# use grep to search for row names that contain the p53 gene
#p53_rows <- grep("^.*E2F2", rownames(countdata))
neat  <- grep("^.*NEAT1", rownames(countdata))
# print the row names that contain the p53 gene
rownames(countdata)[p53_rows]
#load count matrix
countdata <- read.table ("count_table.txt", header=T, row.names = 1)
# use grep to search for row names that contain the p53 gene
#p53_rows <- grep("^.*E2F2", rownames(countdata))
neat  <- grep("^.*NEAT1", rownames(countdata))
# print the row names that contain the p53 gene
rownames(countdata)[p53_rows]
# use grep to search for row names that contain the p53 gene
#p53_rows <- grep("^.*E2F2", rownames(countdata))
neat  <- grep("^.*NEAT1", rownames(countdata))
rownames(countdata)[neat]
# print the row names that contain the p53 gene
#rownames(countdata)[p53_rows]
# assuming your count data is stored in a data frame called `countdata`
# and the row names are stored in the `rownames` attribute of the data frame
# create a vector of E2F gene names
#e2f_genes <- c("ENSG00000007968.6_E2F2", "ENSG00000203435.2_E2F3P2",
# "ENSG00000112242.14_E2F3", "ENSG00000224707.1_E2F3-IT1",
#"ENSG00000205250.8_E2F4", "ENSG00000133740.10_E2F5",
#"ENSG00000169016.16_E2F6", "ENSG00000165891.15_E2F7",
# "ENSG00000129173.12_E2F8")
# subset countdata to include only the E2F genes
#e2f_data <- countdata[e2f_genes, ]
#e2f <- DEGs_br[e2f_genes, ]
# print the E2F gene expression data
#e2f_data
Neat1 <- c("ENSG00000245532.5_NEAT1")
neat_data <-  DEGs_br[Neat1, ]
neat_data
# assuming your count data is stored in a data frame called `countdata`
# and the row names are stored in the `rownames` attribute of the data frame
# create a vector of E2F gene names
#e2f_genes <- c("ENSG00000007968.6_E2F2", "ENSG00000203435.2_E2F3P2",
# "ENSG00000112242.14_E2F3", "ENSG00000224707.1_E2F3-IT1",
#"ENSG00000205250.8_E2F4", "ENSG00000133740.10_E2F5",
#"ENSG00000169016.16_E2F6", "ENSG00000165891.15_E2F7",
# "ENSG00000129173.12_E2F8")
# subset countdata to include only the E2F genes
#e2f_data <- countdata[e2f_genes, ]
#e2f <- DEGs_br[e2f_genes, ]
# print the E2F gene expression data
#e2f_data
Neat1 <- c("ENSG00000245532.5_NEAT1")
neat_data <-  countdata[Neat1, ]
neat_data
rld<- rlogTransformation(dds_r)
library(devtools)
library(Biobase)
library(goseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(pheatmap)
library(tidyverse)
countdata<- read.table ("featureCounts.txt", header=T) #row.names = 1)
countdata$combined<- paste(countdata$Geneid, countdata$gene_name, sep = "_")
countdata<- countdata[ , c(15, 12, 13, 14, 9, 10, 11)] # # Selection of gene counts only
colnames(countdata)[5] <- "AlgG1"
colnames(countdata)[6] <- "AlgG2"
colnames(countdata)[7] <- "AlgG3"
colnames(countdata)[2] <- "CIBG1"
colnames(countdata)[3] <- "CIBG2"
colnames(countdata)[4] <- "CIBG3"
countdata <- data.frame(countdata, row.names = 1)
countdata = countdata[which(rowSums(countdata) > 1), ]
condition = factor(c('CIB','CIB', 'CIB','Alg', 'Alg', 'Alg' ))
batch <- factor(c("G1", "G2", "G3","G1", "G2", "G3"))
coldata = data.frame(row.names = colnames(countdata), condition, batch)
dds = DESeqDataSetFromMatrix(countData = countdata, colData = coldata, design = ~ condition)
dds = DESeq(dds)
#colData(dds)
rld<- rlogTransformation(dds)
plotPCA(rld, intgroup="condition")
#plotPCA(rld, intgroup="condition", returnData = TRUE)
#vsdata = vst(dds, blind = F)
#plotPCA(vsdata, intgroup = 'condition')
plotDispEsts((dds))
plotMA(dds, ylim=c(-5,5), main="MA plot")
res = results(dds, contrast = c("condition" , "CIB", "Alg"), lfcThreshold = 0.38)
# res
summary(res)
with(res, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-5,8), ylim=c(0,15)))
with(subset(res, padj <= 0.1 & (abs(log2FoldChange) > (0.38))), points(log2FoldChange, -log10(padj), pch=20, col="red"))
library(sva)
#dds$condition <- factor(coldata$condition)
#dds$batch <- factor(coldata$batch)
# Extract the normalized counts from the DESeq2 object
normalizedCounts <- counts(dds, normalized = TRUE)
dim(normalizedCounts)
# Convert the normalized counts to a data frame
#normCounts <- data.frame(normalizedCounts)
# Perform ComBat-seq batch correction
combatCounts <- ComBat_seq(normalizedCounts, batch = as.character(dds$batch))
dim(combatCounts)
combatCounts_i <- apply(combatCounts, 2, as.integer)
dimnames(combatCounts_i) <- dimnames(combatCounts)
dim(combatCounts_i)
dds_r = DESeqDataSetFromMatrix(countData = combatCounts_i, colData = coldata, design = ~ condition)
dds_r <- DESeq(dds_r)
rld<- rlogTransformation(dds_r)
plotPCA(rld, intgroup="condition",main="SVA" )
rld<- rlogTransformation(dds_r)
plotPCA(rld, intgroup="condition")
title("SVA")
rld<- rlogTransformation(dds_r)
plotPCA(rld, intgroup="condition")
#plotPCA(rld, intgroup="sample", returnData = TRUE)
View(combatCounts)
R.version.string
library(VennDiagram)
packageVersion("VennDiagram")
library(DESeq2)
library(Biobase)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(ggplot2)
library(pheatmap)
library(tidyverse)
countdata<- read.table ("featureCounts.txt", header=T)#, row.names = 1)
countdata$combined<- paste(countdata$Geneid, countdata$gene_name, sep = "_")
countdata<- countdata[ , c(15, 12, 13, 14, 9, 10, 11)] # # Selection of gene counts only
colnames(countdata)[5] <- "AlgG1"
colnames(countdata)[6] <- "AlgG2"
colnames(countdata)[7] <- "AlgG3"
colnames(countdata)[2] <- "CIBG1"
colnames(countdata)[3] <- "CIBG2"
colnames(countdata)[4] <- "CIBG3"
countdata <- data.frame(countdata, row.names = 1)
countdata = countdata[which(rowSums(countdata) > 1), ]
group<- factor(c(rep("CIB",3), rep("Alginate",3)))
sample = factor(c("CIBG1", "CIBG2", "CIBG3", "AlgG1", "AlgG2", "AlgG3" ))
batch <- factor(c("G1", "G2", "G3","G1", "G2", "G3"))
coldata <- data.frame(row.names=colnames(countdata), group, sample, batch)
dds<- DESeqDataSetFromMatrix (countData= countdata, colData=coldata, design= ~ group)
dds_group = DESeq(dds)
res_group = results(dds_group, lfcThreshold = 0.38)
summary(res_group)
summary(res_group)
rld<- rlogTransformation(dds_group)
plotPCA(rld, intgroup="group")
# Load the necessary libraries if not already loaded
# library(ggplot2)
# Assuming "res" contains your data
# Make sure to replace this with your actual data and variable names
# Create a volcano plot with downregulated genes in blue
png('Volcano_plot.png')
plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot(removed batch effect)", xlim=c(-5,8), ylim=c(0,15))
#png('Volcano_plot.png') #to save the plot use png function, and end it with dev.off fun.
with(res, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot(removed batch effect)", xlim=c(-5,8), ylim=c(0,15)))
dds_group = DESeq(dds)
res_group = results(dds_group, lfcThreshold = 0.38)
summary(res_group)
rld<- rlogTransformation(dds_group)
plotPCA(rld, intgroup="group")
plotMA(dds_group, ylim=c(-5,5), main="MA plot")
# Create a volcano plot with downregulated genes in blue
#png('Volcano_plot.png')
plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot(removed batch effect)", xlim=c(-5,8), ylim=c(0,15))
# Create a volcano plot with downregulated genes in blue
#png('Volcano_plot.png')
plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot(removed batch effect)", xlim=c(-5,8), ylim=c(0,15))
with(res_group, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-5,8), ylim=c(0,15)))
with(subset(res_group, padj <= 0.1 & (abs(log2FoldChange) > (0.38))), points(log2FoldChange, -log10(padj), pch=20, col="red"))
# Create a volcano plot with downregulated genes in blue
#png('Volcano_plot.png')
with(res_group, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-5,8), ylim=c(0,15)))
with(subset(res_group, padj <= 0.1 & (abs(log2FoldChange) > (0.38))), points(log2FoldChange, -log10(padj), pch=20, col="red"))
# Highlight significant downregulated genes in blue
with(subset(res_group, padj <= 0.1 & (abs(log2FoldChange) < (0.38)) , points(log2FoldChange, -log10(padj), pch=20, col="blue"))
# Save the plot
#dev.off()
# Create a volcano plot with downregulated genes in blue
#png('Volcano_plot.png')
with(res_group, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-5,8), ylim=c(0,15)))
with(subset(res_group, padj <= 0.1 & (abs(log2FoldChange) > (0.38))), points(log2FoldChange, -log10(padj), pch=20, col="red"))
# Highlight significant downregulated genes in blue
with(subset(res_group, padj <= 0.1 & (abs(log2FoldChange) < (0.38))) , points(log2FoldChange, -log10(padj), pch=20, col="blue"))
# Save the plot
#dev.off()
# Create a volcano plot with downregulated genes in blue
#png('Volcano_plot.png')
with(res_group, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-5,8), ylim=c(0,15)))
# Highlight significant upregulated genes in red
with(subset(res_group, padj <= 0.1 & abs(log2FoldChange) > 0.38), points(log2FoldChange, -log10(padj), pch=20, col="red"))
# Highlight significant downregulated genes in blue
with(subset(res_group, padj <= 0.1 & abs(log2FoldChange) < 0.38), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
# Save the plot
#dev.off()
# Create a volcano plot with downregulated genes in blue
#png('Volcano_plot.png')
with(res_group, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-5,8), ylim=c(0,15)))
# Highlight significant upregulated genes in red
with(subset(res_group, padj <= 0.1 & log2FoldChange > 0.38), points(log2FoldChange, -log10(padj), pch=20, col="red"))
# Highlight significant downregulated genes in blue
with(subset(res_group, padj <= 0.1 & log2FoldChange < 0.38), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
# Save the plot
#dev.off()
# Create a volcano plot with downregulated genes in blue
png('Volcano_plot.png')
with(res_group, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-5,8), ylim=c(0,15)))
# Highlight significant upregulated genes in red
with(subset(res_group, padj <= 0.1 & log2FoldChange > 0.38), points(log2FoldChange, -log10(padj), pch=20, col="red"))
# Highlight significant downregulated genes in blue
with(subset(res_group, padj <= 0.1 & log2FoldChange < 0.38), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
Save the plot
# Create a volcano plot with downregulated genes in blue
png('Volcano_plot_new_new.png')
with(res_group, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-5,8), ylim=c(0,15)))
# Highlight significant upregulated genes in red
with(subset(res_group, padj <= 0.1 & log2FoldChange > 0.38), points(log2FoldChange, -log10(padj), pch=20, col="red"))
# Highlight significant downregulated genes in blue
with(subset(res_group, padj <= 0.1 & log2FoldChange < 0.38), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
#Save the plot
dev.off()
# Create a volcano plot with downregulated genes in blue
#png('Volcano_plot_new_new.png')
with(res_group, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-5,8), ylim=c(0,15)))
# Highlight significant upregulated genes in red
with(subset(res_group, padj <= 0.1 & log2FoldChange > 0.38), points(log2FoldChange, -log10(padj), pch=20, col="red"))
# Highlight significant downregulated genes in blue
with(subset(res_group, padj <= 0.1 & log2FoldChange < 0.38), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
#Save the plot
#dev.off()
View(DEGs)
# Assuming 'data' contains your table data
# Convert the data into a data frame
data_df <- as.data.frame(data)
# Assuming 'data' contains your table data
# Replace 'your_file_path' with the actual file path to your data.
file_path <- "GO_Biological_Process_2023_table.txt"
# Read the table from the file (assuming tab-delimited)
data <- read.table(file_path, header = TRUE, sep = "\t")
# Now, 'data' contains your table data, and the first row is assumed to be the header.
# You can inspect the first few rows of your data using the 'head()' function.
head(data)
# Convert the data into a data frame
data_df <- as.data.frame(data)
# Sort the data frame by the "Combined" column in descending order
sorted_data_df <- data_df[order(data_df$Combined, decreasing = TRUE), ]
# Get the top 20 rows
top_20 <- sorted_data_df[1:20, ]
# View the top 20 rows
print(top_20)
View(top_20)
# Assuming 'data' contains your table data
# Replace 'your_file_path' with the actual file path to your data.
file_path <- "GO_Biological_Process_2023_table.txt"
# Read the table from the file (assuming tab-delimited)
data <- read.table(file_path, header = TRUE, sep = "\t")
data_df <- as.data.frame(data)
# Sort the data frame by the "Combined" column in descending order
sorted_data_df <- data_df[order(data_df$Combined, decreasing = TRUE), ]
# Get the top 20 rows
top_20 <- sorted_data_df[1:20, ]
View(top_20)
# Assuming 'data' contains your table data
# Replace 'your_file_path' with the actual file path to your data.
file_path <- "GO_Biological_Process_2023_table.txt"
# Read the table from the file (assuming tab-delimited)
data <- read.table(file_path, header = TRUE, sep = "\t")
# Assuming 'data' contains your table data
# Convert the data into a data frame
data_df <- as.data.frame(data)
# Convert the "Combined" column to numeric
data_df$Combined <- as.numeric(data_df$Combined)
# Sort the data frame by the "Combined" column in descending order
sorted_data_df <- data_df[order(data_df$Combined, decreasing = TRUE), ]
# Get the top 20 rows
top_20 <- sorted_data_df[1:20, ]
# View the top 20 rows
print(top_20)
# Assuming 'data' contains your table data
# Replace 'your_file_path' with the actual file path to your data.
file_path <- "GO_Biological_Process_2023_table.txt"
# Read the table from the file (assuming tab-delimited)
data <- read.table(file_path, header = TRUE, sep = "\t")
# Assuming 'data' contains your table data
# Convert the data into a data frame
data_df <- as.data.frame(data)
# Convert the "Combined" column to numeric
data_df$Combined <- as.numeric(data_df$Combined)
# Sort the data frame by the "Combined" column in descending order
sorted_data_df <- data_df[order(data_df$Combined, decreasing = TRUE), ]
# Get the top 20 rows
top_20 <- sorted_data_df[1:20, ]
View(top_20)
# Assuming 'data' contains your table data
# Replace 'your_file_path' with the actual file path to your data.
file_path <- "GO_Biological_Process_2023_table.txt"
# Read the table from the file (assuming tab-delimited)
data <- read.table(file_path, header = TRUE, sep = "\t")
# Assuming 'data' contains your table data
# Convert the data into a data frame
data_df <- as.data.frame(data)
# Convert the "Combined" column to numeric
data_df$Combined <- as.numeric(data_df$Combined)
# Sort the data frame by the "Combined" column in descending order
sorted_data_df <- data_df[order(data_df$Combined, decreasing = TRUE), ]
# Get the top 20 rows
top_20 <- sorted_data_df[1:20, ]
write.csv(top_20, file = "top_20_sorted_data_biological_process.csv", row.names = FALSE)
setwd("/Users/ruby/Documents/training/r_sales_forcast")
pwd
